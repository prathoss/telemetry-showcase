services:
  gateway:
    build:
      context: gateway
    labels:
      # allow log collection with alloy
      logs.collect: true
    environment:
      SERVICE_ADDRESS: ":8080"

      OTEL_SERVICE_NAME: gateway
      OTEL_RESOURCE_ATTRIBUTES: "deployment.environment=local"

  users:
    build:
      context: users
    labels:
      # allow log collection with alloy
      logs.collect: true
    environment:
      SERVICE_ADDRESS: ":50050"

      OTEL_SERVICE_NAME: users
      OTEL_RESOURCE_ATTRIBUTES: "deployment.environment=local"

  bikes:
    build:
      context: bikes
    labels:
      # allow log collection with alloy
      logs.collect: true
    environment:
      SERVICE_ADDRESS: "grpc:50051"

      OTEL_SERVICE_NAME: bikes
      OTEL_RESOURCE_ATTRIBUTES: "deployment.environment=local"

  invoices:
    build:
      context: invoices
    labels:
      # allow log collection with alloy
      logs.collect: true
    environment:

      OTEL_SERVICE_NAME: invoices
      OTEL_RESOURCE_ATTRIBUTES: "deployment.environment=local"


### OTHER SERVICES ###

  kafka:
    image: docker.io/bitnami/kafka:3.7
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

  postgres:
    image: postgres:15-alpine3.17
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
      - ./config/pg-app-init.sql:/docker-entrypoint-initdb.d/pg-app-init.sql
    environment:
      POSTGRES_PASSWORD: localDb123
    ports:
      - "5432:5432"

  redis:
    image: redis:alpine3.17
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    ports:
      - "6379:6379"
